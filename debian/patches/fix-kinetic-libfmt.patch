Description: Build fixes for libfmt > 8
Author: Luciano Lo Giudice <luciano.logiudice@canonical.com>
Forwarded: no

---
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 30cf360546..eb37a459ab 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -78,6 +78,7 @@ add_definitions(
   -D_THREAD_SAFE
   -D__STDC_FORMAT_MACROS
   -D_FILE_OFFSET_BITS=64
+  -DFMT_DEPRECATED_OSTREAM
   -DBOOST_ASIO_DISABLE_THREAD_KEYWORD_EXTENSION)
 if(Boost_VERSION VERSION_GREATER_EQUAL 1.74)
   add_definitions(-DBOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT)
diff --git a/src/crimson/os/seastore/onode_manager/staged-fltree/node_extent_accessor.h b/src/crimson/os/seastore/onode_manager/staged-fltree/node_extent_accessor.h
index 379583523d..10cdeab1ad 100644
--- a/src/crimson/os/seastore/onode_manager/staged-fltree/node_extent_accessor.h
+++ b/src/crimson/os/seastore/onode_manager/staged-fltree/node_extent_accessor.h
@@ -206,7 +206,7 @@ class DeltaRecorderT final: public DeltaRecorder {
       default:
         SUBERROR(seastore_onode,
             "got unknown op {} when replay {}",
-            op, node);
+            static_cast<int>(op), node);
         ceph_abort("fatal error");
       }
     } catch (buffer::error& e) {
diff --git a/src/crimson/os/seastore/seastore.cc b/src/crimson/os/seastore/seastore.cc
index eb166b1ad3..408211a744 100644
--- a/src/crimson/os/seastore/seastore.cc
+++ b/src/crimson/os/seastore/seastore.cc
@@ -124,7 +124,7 @@ void SeaStore::register_metrics()
 
   for (auto& [op_type, label] : labels_by_op_type) {
     auto desc = fmt::format("latency of seastore operation (optype={})",
-                            op_type);
+                            static_cast<int>(op_type));
     metrics.add_group(
       "seastore",
       {
diff --git a/src/test/crimson/seastore/onode_tree/test_value.h b/src/test/crimson/seastore/onode_tree/test_value.h
index 4a2a21b98f..cb826a46f3 100644
--- a/src/test/crimson/seastore/onode_tree/test_value.h
+++ b/src/test/crimson/seastore/onode_tree/test_value.h
@@ -138,7 +138,7 @@ class TestValue final : public Value {
         }
         default:
           logger().error("OTree::TestValue::Replay: got unknown op {} when replay {:#x}+{:#x}",
-                         op, value_addr, payload_mut.get_length());
+                         static_cast<int>(op), value_addr, payload_mut.get_length());
           ceph_abort();
         }
       } catch (buffer::error& e) {
